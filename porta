#!/bin/sh

# This script restricts incoming TCP traffic for a user to a specified list of ports.
# Usage: ./assign-user-ports.sh <USERNAME> <PORTS>
#   Where PORTS is a comma separated list of TCP ports.

CONFIG="./porta.conf"

function sanitize_config () {
    touch -a /etc/porta.conf

}

# Config Structure:
# [user.ada]
#   tcp 3000
#   tcp 3001
# [user.alex]
#   tcp 4000
#   tcp 4001
#   
#


function read_config () {
    local USER_PREFIX="user."
    USERS=()
    tr -d '\r' < $CONFIG > $CONFIG.unix
    while read key val
    do
        if [[ ! $key =~ ^\ *# && -n $key ]]; then
            val="${val%%\#*}"    # Del in line right comments
            val="${val%%*( )}"   # Del trailing spaces
            val="${val%\"*}"     # Del opening string quotes 
            val="${val#\"*}"     # Del closing string quotes 
            if [[ $key =~ ^${USER_PREFIX}\w+$ ]]; then
                local username=${key#$USER_PREFIX}
                if id -u $username; then
                    declare $username="$val"
                    USERS+=($username)
                    echo $key
                    echo $val
                fi
            elif [[ $key ]]

            fi
        fi
    done < $CONFIG.unix
}

function apply_rules () {
    local TARGET_USER=$1
    local TARGET_UID=$(id -u $1)
    local ALLOWED_PORTS=$(echo $2 | tr "," "\n")
    local CHAIN_NAME="allowed_ports_for_$TARGET_USER"

    iptables --append OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    # create a new chain
    iptables --new-chain $CHAIN_NAME
    # use new chain to process packets generated by $1
    iptables -A OUTPUT -m owner --uid-owner $UID -j $CHAIN_NAME
    for port in $ALLOWED_PORTS
    do
        echo "Enabling port $port for user $TARGET_USER uid $TARGET_UID"
        iptables -A $CHAIN_NAME -p tcp --syn -d 127.0.0.1 --dport "$i" -j RETURN
    done
    # reject everything else and stop hackers downloading code into our server
    iptables -A $CHAIN_NAME -j REJECT
}

usage() {
    cat << EOF
Usage: $0 -[SAR] -u user -p ports
       $0 -D -u user
       $0 -X

Commands:
    -S -u user -p ports     Set open ports for user and update firewall rules
    -A -u user -p ports     Append open ports for user and update firewall rules
    -R -u user -p ports     Remove open ports for user and update firewall rules
    -D -u user              Remove all open ports for user and update firewall rules
    -X                      Apply firewall rules

Arguments:
    user    UNIX username
    ports   comma separated list of port numbers

EOF 1<&2
    exit 1
}

while getopts "SARDXu:p:" OPTION; do
  case "$OPTION" in
    S)
      OPT_MODE="SET"
      ;;
    A)
      OPT_MODE="APPEND"
      ;;
    R)
      OPT_MODE="REMOVE"
      ;;
    D)
      OPT_MODE="DELETE"
      ;;
    X)
      OPT_MODE="APPLY"
      ;;
    u)
      OPT_USER=$OPTARG
      ;;
    p)
      OPT_PORTS=$OPTARG
      ;;
    ?)
      usage
      ;;
  esac
done
shift "$(($OPTIND -1))"

if [[ $OPT_MODE == "SET" ]]; then

elif [[ $OPT_MODE == "APPEND" ]]; then

elif [[ $OPT_MODE == "REMOVE" ]]; then

elif [[ $OPT_MODE == "DELETE" ]]; then

elif [[ $OPT_MODE == "APPLY" ]]; then

else
    usage
fi