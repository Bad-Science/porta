#!/bin/sh

declare DEFAULT_CONFIG_FILE="/etc/porta/porta.conf"
declare SUPPORTED_PROTOCOLS="tcp|udp|udplite|icmp|icmpv6|esp|ah|sctp|mh|all"
declare SECTION_USER_REGEX="^\[user\.([a-z_][a-z0-9_]{0,30})\]$"
declare ENTRY_PORT_REGEX="^(${SUPPORTED_PROTOCOLS})\s+(\d+)$"
declare -A USER_MAP

function usage () {
    cat << EOF
Usage: $0 -[SAR] -u user -p ports
       $0 -D -u user
       $0 -X

Commands:
    -S -u user -p ports     Set open ports for user and update firewall rules
    -A -u user -p ports     Append open ports for user and update firewall rules
    -R -u user -p ports     Remove open ports for user and update firewall rules
    -D -u user              Remove all open ports for user and update firewall rules
    -X                      Apply firewall rules

Arguments:
    user    UNIX username
    ports   comma separated list of port numbers

EOF 1<&2
    exit 1
}

function ensure_config () {
    local config_file=$1
    mkdir -p ${dirname "${config_file}"}
    touch -a $config_file
}

# Config File Structure:
#
# [user.ada]
#   tcp 3000
#   tcp 3001
# [user.alex]
#   tcp 4000
#   tcp 4001
#
# Config Loaded Structure:
#
# USER_MAP[ada]=tcp:3000,tcp:3001
# USER_MAP[alex]=tcp:4000,tcp:4001

function set_user_ports () {
    
}

function append_user_port () {

}

function remove_user_port () {

}

function remove_all_user_ports () {

}

function load_config () {
    local config_file=$1
    local current_user
    ensure_config $config_file
    while IFS= read -r line
    do
        line="${line%%\#*}"
        line="${line%%*( )}"

        if [[ $line =~ $SECTION_USER_REGEX ]]
            current_user="${BASH_REMATCH[1]}"
            if id -u $current_user; then
                USER_MAP[$current_user]=""
            fi
        elif [[ $line =~ ENTRY_PORT_REGEX ]]
            if [[ ! -z "${USER_MAP[$current_user]}" ]]; then
                USER_MAP[$current_user]+=","
            fi
            USER_MAP[$current_user]+="${BASH_REMATCH[1]}:${BASH_REMATCH[2]}"
        fi
    done <$config_file
}

function write_config () {
    local config_file=$1
}

function apply_rules () {
    local target_user=$1
    local target_uid=$(id -u $1)
    local allowed_ports=$(echo $2 | tr "," "\n")
    local chain_name="allowed_ports_for_$target_user"

    iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    # delete old chain
    iptables -F $chain_name
    # create a new chain
    iptables -N $chain_name
    # use new chain to process packets generated by $1
    iptables -A OUTPUT -m owner --uid-owner $target_uid -j $chain_name
    for port in $allowed_ports
    do
        echo "Enabling port $port for user $target_user uid $target_uid"
        protocol=${port%\:*}
        number=${port#*\:}
        iptables -A $chain_name -p $protocol --syn -d 127.0.0.1 --dport $number -j RETURN
    done
    # reject everything else and stop hackers downloading code into our server
    iptables -A $chain_name -j REJECT
}

function apply_config () {
    for current_user in "${!USER_MAP[@]}"
    do
        apply_rules $current_user "${USER_MAP[$current_user]}"
    done
}

function sanitize_opt_ports () {

}

while getopts "SARDXu:p:" OPTION; do
  case "$OPTION" in
    S) OPT_MODE="SET" ;;
    A) OPT_MODE="APPEND" ;;
    R) OPT_MODE="REMOVE" ;;
    D) OPT_MODE="DELETE" ;;
    X) OPT_MODE="APPLY" ;;
    u) OPT_USER=$OPTARG ;;
    p) OPT_PORTS=$OPTARG ;;
    ?) usage ;;
  esac
done
shift "$(($OPTIND -1))"

if [[ $OPT_MODE =~ ^SET|APPEND|REMOVE|DELETE$ ]]; then
    if [[ -z {OPT_USER+x} || -z {OPT_PORTS+x} ]]; then
        usage;
    fi
fi

load_config $DEFAULT_CONFIG_FILE

if [[ $OPT_MODE == "SET" ]]; then
    set_user_ports $OPT_USER $OPT_PORTS
elif [[ $OPT_MODE == "APPEND" ]]; then
    append_user_ports $OPT_USER $OPT_PORTS
elif [[ $OPT_MODE == "REMOVE" ]]; then
    remove_user_ports $OPT_USER $OPT_PORTS
elif [[ $OPT_MODE == "DELETE" ]]; then
    remove_all_user_ports $OPT_USER
elif [[ ! $OPT_MODE == "APPLY" ]]; then
    usage
fi

apply_config
